mod0 <- multinom(party ~ gender + race, data=data)
summary(mod0)
exp(-0.1621111)
exp(-1.154063)
exp(0.4138623)
exp(0.3800934)
mod_sum <- summary(mod0)
estimates <- mod_sum
mod_sum <- summary(mod0)
estimates <- mod_sum$coefficients
estimates
estimates[1,1]
estimates[1:3]
estimates[1,]
mod_sum <- summary(mod0)
estimates <- mod_sum$coefficients
# Estimate Democrat for White Male
eta_1 <- estimates[1,] %*% c(1,1,1)
eta_2 <- estimates[2,] %*% c(1,1,1)
pi_1 <- exp(eta_1)/(1 + exp(eta_1) + exp(eta_2))
# Estimate Republican for White Female
eta_1 <- estimates[1,] %*% c(1,0,1)
eta_2 <- estimates[2,] %*% c(1,0,1)
pi_2 <- exp(eta_2)/(1 + exp(eta_1) + exp(eta_2))
# Estimate Independent for Black Male
eta_1 <- estimates[1,] %*% c(1,1,0)
eta_2 <- estimates[2,] %*% c(1,1,0)
pi_3 <- 1/(1 + exp(eta_1) + exp(eta_2))
print("Pi1, Pi2, Pi3:")
print(c(pi_1, pi_2, pi_3))
# Model with no race variable
mod1 <- <- multinom(party ~ gender, data=data)
# Model with no race variable
mod1 <- multinom(party ~ gender, data=data)
lrtest(mod1=0, mod1)
# Model with no race variable
mod1 <- multinom(party ~ gender, data=data)
lrtest(mod0, mod1)
# Use VGAM models for likelihood ratio test
data <- read.csv("politicalparty-1.csv")
mod0 <- vglm(cbind(Democrat, Republican, Independent) ~ gender + race, family = "multinomial", data=data)
# Use VGAM models for likelihood ratio test
data <- read.csv("politicalparty-1.csv")
mod0 <- vglm(cbind(Democrat, Republican, Independent) ~ Gender + Race, family = "multinomial", data=data)
mod1 <- vglm(cbind(Democrat, Republican, Independent) ~ Gender, family = "multinomial", data=data)
lrtest(mod0, mod1)
mod0 <- vglm(cbind(Democrat, Republican, Independent) ~ Gender + Race, family = "multinomial", data=data)
mod1 <- vglm(cbind(Democrat, Republican, Independent) ~ Race, family = "multinomial", data=data)
lrtest(mod0, mod1)
mod0 <- vglm(cbind(Democrat, Republican, Independent) ~ Gender + Race, family = "multinomial", data=data)
mod1 <- vglm(cbind(Democrat, Republican, Independent) ~ Race, family = "multinomial", data=data)
lrtest(mod1, mod0)
mod0 <- vglm(cbind(Democrat, Republican, Independent) ~ Gender + Race, family = "multinomial", data=data)
mod1 <- vglm(cbind(Democrat, Republican, Independent) ~ 1, family = "multinomial", data=data)
lrtest(mod0, mod1)
mod0 <- multinom(party ~ gender + race, data=data)
mod_sum <- summary(mod0)
estimates <- mod_sum$coefficients
errors <- mod_sum$standard.errors
errors
mod0 <- multinom(party ~ gender + race, data=data)
mod_sum <- summary(mod0)
estimates <- mod_sum$coefficients
errors <- mod_sum$standard.errors
b11 <- estimates[1,2]
b11_error <- errors[1,2]
alpha <- 0.05
z.cutoff <- qnorm(1 - (alpha/2))
width <- z.cutoff * b11_error
ci_interval <- b11 + c(-1,1)*width
ci_interval
mod0 <- multinom(party ~ gender + race, data=data)
mod_sum <- summary(mod0)
estimates <- mod_sum$coefficients
errors <- mod_sum$standard.errors
b11 <- estimates[1,2]
b11_error <- errors[1,2]
alpha <- 0.05
z.cutoff <- qnorm(1 - (alpha/2))
width <- z.cutoff * b11_error
ci_interval <- b11 + c(-1,1)*width
print("Confidence Interval for B11: ")
ci_interval
summary(mod0)
z.cutoff
mod0 <- vglm(cbind(Democrat, Republican, Independent) ~ Gender + Race, family = "multinomial", data=data)
mod1 <- vglm(cbind(Democrat, Republican, Independent) ~ Race, family = "multinomial", data=data)
lrtest(mod0, mod1)
summary(mod0)
gender <- c(rep("Male", 132+176+127+42+6+12), rep("Female", 172+129+139+56+4+15))
race <- c(rep("White", 132+176+127), rep("Black", 42+6+12), rep("White", 172+129+139), rep("Black", 56+4+15))
party <- c(rep("Democrat",132), rep("Republican", 176), rep("Independent", 127), rep("Democrat",42), rep("Republican", 6), rep("Independent", 12), rep("Democrat",172), rep("Republican", 129), rep("Independent", 139), rep("Democrat",56), rep("Republican", 4), rep("Independent", 15))
data <- as.data.frame(cbind(gender,race,party))
data$gender <- as.factor(data$gender)
data$race <- as.factor(data$race)
data$party <- as.factor(data$party)
# Make Independent the base level
data$party <- relevel(data$party, ref = "Independent")
mod0 <- multinom(party ~ gender + race, data=data)
mod_sum <- summary(mod0)
estimates <- mod_sum$coefficients
errors <- mod_sum$standard.errors
b11 <- estimates[1,2]
b11_error <- errors[1,2]
alpha <- 0.05
z.cutoff <- qnorm(1 - (alpha/2))
width <- z.cutoff * b11_error
ci_interval <- b11 + c(-1,1)*width
print("Confidence Interval for B11: ")
ci_interval
summary(mod0)
# Use VGAM models for likelihood ratio test
data <- read.csv("politicalparty-1.csv")
mod0 <- vglm(cbind(Democrat, Republican, Independent) ~ Gender + Race, family = "multinomial", data=data)
mod1 <- vglm(cbind(Democrat, Republican, Independent) ~ Gender, family = "multinomial", data=data)
lrtest(mod0, mod1)
summary(mod0)
exp(ci_interval)
gender <- c(rep("Male", 132+176+127+42+6+12), rep("Female", 172+129+139+56+4+15))
race <- c(rep("White", 132+176+127), rep("Black", 42+6+12), rep("White", 172+129+139), rep("Black", 56+4+15))
party <- c(rep("Democrat",132), rep("Republican", 176), rep("Independent", 127), rep("Democrat",42), rep("Republican", 6), rep("Independent", 12), rep("Democrat",172), rep("Republican", 129), rep("Independent", 139), rep("Democrat",56), rep("Republican", 4), rep("Independent", 15))
data <- as.data.frame(cbind(gender,race,party))
data$gender <- as.factor(data$gender)
data$race <- as.factor(data$race)
data$party <- as.factor(data$party)
# Make Independent the base level
data$party <- relevel(data$party, ref = "Independent")
mod0 <- multinom(party ~ gender + race, data=data)
mod_sum <- summary(mod0)
estimates <- mod_sum$coefficients
errors <- mod_sum$standard.errors
b11 <- estimates[1,2]
b11_error <- errors[1,2]
alpha <- 0.05
z.cutoff <- qnorm(1 - (alpha/2))
width <- z.cutoff * b11_error
ci_interval <- b11 + c(-1,1)*width
print("Confidence Interval for B11: ")
ci_interval
summary(mod0)
exp(0.4138623)
exp(1.126213)
logit(1)
abs(-1)
logit(0)
linear_prop_distance <- function(e1, e2){
logit1 <- logit(e1)
logit2 <- logit(e2)
output <- abs(logit1 - logit2)
return(output)
}
logit(1)
logit <- function(p){
output <- log(p/(1-p))
return(output)
}
logit <- function(p){
output <- log(p/(1-p))
return(output)
}
linear_prop_distance <- function(e1, e2){
logit1 <- logit(e1)
logit2 <- logit(e2)
output <- abs(logit1 - logit2)
return(output)
}
logit(1)
logit(0)
logit(0.5)
linear_prop_distance(0.5,0.5)
linear_prop_distance(0.5,0.4)
linear_prop_distance(0.5,0.1)
DF <- data.frame(
x=1:10,
y=10:1,
z=rep(5,10),
a=11:20
)
DF
df <- subset(DF, select = -c(a))
df
foo <- c(1,2,3,4)
2 %in% foo
5 %in% foo
x %in% colnames(df)
"x" %in% colnames(df)
df <- subset(DF, select = -c("x"))
df
rm(x)
x
df <- subset(DF, select = -c(x))
df
foo <- c(1,2,3)
foo2 <- tail(foo,1)
foo2
foo
foo <- foo[1:2]
foo
foo
foo2 <- foo
foo2
append(3, foo2)
foo2
foo2 <- append(foo2, 3)
foo2
foo
#Data
data <- c(143, 164, 188, 188, 190, 192, 206, 209, 213, 216, 220, 227, 230, 234, 246, 265, 304)
length(data)
#Data
data <- c(143, 164, 188, 188, 190, 192, 206, 209, 213, 216, 220, 227, 230, 234, 246, 265, 304)
n <- length(data)
idx <- c(1:17)
# S hat
s_hat <- 1 - ((idx-0.5)/n)
s_hat
#Data
data <- c(143, 164, 188, 188, 190, 192, 206, 209, 213, 216, 220, 227, 230, 234, 246, 265, 304)
n <- length(data)
idx <- c(1:17)
# S hat
s_hat <- 1 - ((idx-0.5)/n)
# Plot for Weibull Test
x <- log(data)
y <- log(-log(s_hat))
plot(x,y)
mod0 <- lm(y ~ x)
summary(mod0)
length(xA)
xA <- c(1.25, 1.41, 4.98, 5.25, 5.38, 6.92, 8.89, 10.98, 11.18, 13.11, 13.21, 16.33, 19.77, 21.08, 21.84, 22.07, 31.38, 32.61, 37.18, 42.92)
deltaA <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1)
xB <- c(1.05, 2.92, 3.61, 4.20, 4.49, 6.72, 7.31, 9.08, 9.11, 14.49, 16.85, 18.82, 26.59, 30.26, 41.34)
deltaB <- c(1,1,1,1,1,1,1,1,1,0,1,0,0,0,0)
length(xA)
length(delatA)
length(deltaA)
length(xB)
length(deltaB)
# Group A Survival Function Estimate
library(survival)
kmA <-survfit(Surv(xA, deltaA)~1,type="kaplan-meier")
kmA$surv
plot(kmA$time,kmA$surv, type="s",xlab="Time",ylab="Survival")
# Group B Survival Function Estimate
kmB <-survfit(Surv(xB, deltaB)~1,type="kaplan-meier")
kmB$surv
plot(kmB$time,kmB$surv, type="s",xlab="Time",ylab="Survival")
summary(kmA)
summary(kmB)
library(dplyr)
#Data
data <- c(143, 164, 188, 188, 190, 192, 206, 209, 213, 216, 220, 227, 230, 234, 246, 265, 304)
n <- length(data)
idx <- c(1:17)
# S hat
s_hat <- 1 - ((idx-0.5)/n)
# Plot for Weibull Test
x <- log(data)
y <- log(-log(s_hat))
plot(x,y)
mod0 <- lm(y ~ x)
summary(mod0)
#Data
xA <- c(1.25, 1.41, 4.98, 5.25, 5.38, 6.92, 8.89, 10.98, 11.18, 13.11, 13.21, 16.33, 19.77, 21.08, 21.84, 22.07, 31.38, 32.61, 37.18, 42.92)
deltaA <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1)
xB <- c(1.05, 2.92, 3.61, 4.20, 4.49, 6.72, 7.31, 9.08, 9.11, 14.49, 16.85, 18.82, 26.59, 30.26, 41.34)
deltaB <- c(1,1,1,1,1,1,1,1,1,0,1,0,0,0,0)
# Group A Survival Function Estimate
library(survival)
kmA <-survfit(Surv(xA, deltaA)~1,type="kaplan-meier")
kmA$surv
plot(kmA$time,kmA$surv, type="s",xlab="Time",ylab="Survival")
# Group B Survival Function Estimate
kmB <-survfit(Surv(xB, deltaB)~1,type="kaplan-meier")
kmB$surv
plot(kmB$time,kmB$surv, type="s",xlab="Time",ylab="Survival")
summary(kmA)
summary(kmB)
-37.2330
-37.2330/6.8538
exp(-5.432461)
# Group A Survival Function Estimate
library(survival)
kmA <-survfit(Surv(xA, deltaA)~1,type="kaplan-meier")
kmA$surv
plot(kmA$time,kmA$surv, type="s",xlab="Time",ylab="Survival")
df <- data.frame( a = 1:10 )
df
df[1]
foo <- matrix(
c(1,2,3,4,5,6,7,8),
nrow = 4,
ncol = 2,
byrow = TRUE)
foo
foo[1]
foo[1,]
dim(foo)
foo[4,]
foo[1:3,]
foo <- c()
foo
append(foo, c(1,2))
foo
foo <- append(foo, c(1,2))
foo
foo <- append(foo, c(1,2))
foo
foo <- list()
foo
foo <- append(foo, c(1,2))
foo
foo <- c(c(1,2))
foo
foo <- append(foo, c(1,2))
foo
foo
foo <- list()
foo <- append(foo, list(1,2))
foo
foo <- append(foo, list(1,2))
foo
length(foo)
foo <- list(foo, foo)
foo
foo[[1]]
foo[[2]]
foo[[2]] = 7
foo
foo[[2]]
class(foo[[2]])
class(7)
class(foo[[1]])
foo <- list()
length(foo)
foo <- list(1,2,3)
foo
append(foo, c(4,5,6))
too <- c(4,5,6)
append(foo, list(too))
foo2 <- append(foo, list(too))
foo2
foo2[[4]]
class(foo2[[4]])
foo3 <- foo2[[4]]
foo3
foo3[1]
e <- c(1,2,3)
e_prime <- c(4,5,6)
new_group <- list(list(e),list(e_prime))
new_group
new_S <- list()
new_S <- append(new_S, new_group)
new_S
new_S <- append(new_S, new_group)
new_S
length(new_S)
new_S[[1]]
new_S[5] = new_group
new_S <- list()
new_S[1] <- new_group
new_group
e1 <- c(1,2,3)
e2 <- c(4,5,6)
x <- list()
x[[1]] <- e1
x[[2]] <- e2
x
y <- list()
y[[1]] <- e1
y[[2]] <- e2
y
all <- list()
all[[1]] <- x
all[[2]] <- y
all
all[[1]]
length(all)
z <- list(7,8,9)
all[[3]] <- z
all
all[[3]]
a <- list(1,2,3)
all[[3]] <- a
all[[3]]
b <- all[[2]]
b
b[1]
b[1][3]
b[1,3]
b[1]
b[[1]]
b[[1]][3]
mat <- matrix(, nrow = 15, ncol = n.columns)
mat <- matrix(, nrow = 15, ncol = 15)
mat
n_i <- c()
n_i <- c(n_i, 1, 2)
n_i
n_i <- c()
n_i
lowdim_data <- read.csv("../data/lowDim_dataset.csv")
highdim_data <- read.csv("../data/highDim_dataset.csv")
print(dim(lowdim_data))
print(dim(highdim_data))
head(lowdim_data)
head(highdim_data)
source("../lib/LR_propensity_est.R")
lowdim_model <- lr_propensity_model(lowdim_data)
highdim_model <- lr_propensity_model(highdim_data)
lowdim_prop_scores <- lr_propensity(lowdim_data, lowdim_model)
lowdim_data
colnames(lowdim_data)
"Y" %in% colnames(lowdim_data
)
foo <- lowdim_data
"Y" %in% colnames(foo)
foo <- subset(foo, select = -c(Y))
lowdim_prop_scores <- lr_propensity(lowdim_data, lowdim_model)
lowdim_prop_scores <- lr_propensity(lowdim_data, lowdim_model)
source("../lib/LR_propensity_est.R")
lowdim_model <- lr_propensity_model(lowdim_data)
highdim_model <- lr_propensity_model(highdim_data)
lowdim_prop_scores <- lr_propensity(lowdim_data, lowdim_model)
highdim_prop_scores <- lr_propensity(highdim_data, highdim_model)
lowdim_prop_scores
isTRUE(1)
isTRUE(0)
foo <- lowdim_data$A
foo
foo <- foo == 1
foo
foo1 <- c(1,2,3)
foo2 <- c(4,5,6)
foo <- as.matrix(cbind(foo1, foo2))
foo
lowdim_n <- dim(lowdim_data)[1]
lowdim_index <- c(1:lowdim_n)
lowdim_treatment_indicator <- lowdim_data$A == 1
lowdim_U <- as.matrix(cbind(lowdim_index, lowdim_prop_scores, lowdim_treatment_indicator))
highdim_n <- dim(highdim_data)[1]
highdim_index <- c(1:highdim_n)
highdim_treatment_indicator <- highdim_data$A == 1
highdim_U <- as.matrix(cbind(highdim_index, highdim_prop_scores, highdim_treatment_indicator))
source("../lib/distance_matrix")
source("../lib/distance_matrix.R")
source("../lib/distance_matrix.R")
source("../lib/LR_propensity_est.R")
source("../lib/LR_propensity_est.R")
lowdim_model <- lr_propensity_model(lowdim_data)
highdim_model <- lr_propensity_model(highdim_data)
source("../lib/distance_matrix.R")
source("../lib/distance_matrix.R")
source("../lib/distance_matrix.R")
source("../lib/LR_propensity_est.R")
lowdim_model <- lr_propensity_model(lowdim_data)
highdim_model <- lr_propensity_model(highdim_data)
source("../lib/distance_matrix.R")
source("../lib/distance_matrix.R")
source("../lib/distance_matrix.R")
lowdim_D <- get_distance_matrix(lowdim_U)
highdim_D <- get_distance_matrix(highdim_U)
dim(lowdim_D)
dim(highdim_D)
source("../lib/propensity_fullmatching.R")
lowdim_S <- propensity_matching_root(lowdim_U, lowdim_D)
source("../lib/propensity_fullmatching.R")
lowdim_S <- propensity_matching_root(lowdim_U, lowdim_D)
source("../lib/propensity_fullmatching.R")
lowdim_S <- propensity_matching_root(lowdim_U, lowdim_D)
source("../lib/propensity_fullmatching.R")
lowdim_S <- propensity_matching_root(lowdim_U, lowdim_D)
foo <- c(1:0)
foo
source("../lib/propensity_fullmatching.R")
lowdim_S <- propensity_matching_root(lowdim_U, lowdim_D)
source("../lib/propensity_fullmatching.R")
lowdim_S <- propensity_matching_root(lowdim_U, lowdim_D)
foo <- c(1,2,3)
foo <- as.matrix(foo)
foo
foo <- c(1,2,3)
foo <- as.matrix(foo, byrow=TRUE)
foo
rbind(foo)
foo
foo <- c(1,2,3)
foo <- as.matrix(rbind(foo, foo))
foo
foo <- foo[1:1,]
foo
dim(foo)
foo <- NULL
foo
isTRUE(!foo)
isTRUE(foo)
foo <- FALSE
!foo
foo <- c(1,2,3)
foo <- as.matrix(rbind(foo, foo))
foo
foo <- foo[1:1,]
foo
foo[1]
is.vector(foo)
source("../lib/propensity_fullmatching.R")
lowdim_S <- propensity_matching_root(lowdim_U, lowdim_D)
source("../lib/propensity_fullmatching.R")
lowdim_S <- propensity_matching_root(lowdim_U, lowdim_D)
source("../lib/propensity_fullmatching.R")
lowdim_S <- propensity_matching_root(lowdim_U, lowdim_D)
highdim_S <- propensity_matching_root(highdim_U, highdim_D)
